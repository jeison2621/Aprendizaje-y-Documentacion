1 - Git - GitHub
    Aprender Git y GitHub es fundamental para trabajar en proyectos de desarrollo de software de manera colaborativa. Aquí tienes una guía paso a paso para comenzar:
    Paso 1: Instalar Git

    Descargar Git:
        Visita la página oficial de Git y descarga la versión adecuada para tu sistema operativo.

    Instalar Git:
        Sigue las instrucciones de instalación proporcionadas en la página oficial.

    Verificar la instalación:
        Abre una terminal (en Linux y macOS) o el Git Bash (en Windows) y ejecuta el siguiente comando para asegurarte de que Git se haya instalado correctamente:

        bash

        git --version

    Paso 2: Configurar Git

    Configurar nombre de usuario y correo electrónico:
        Utiliza los siguientes comandos para configurar tu nombre de usuario y correo electrónico, que se usarán en los commits:

        bash

    git config --global user.name "Tu Nombre"
    git config --global user.email "tu@email.com"

    Configurar el editor de texto (opcional):

    Si deseas cambiar el editor de texto que Git utiliza para los mensajes de commit, puedes hacerlo con el siguiente comando:

    bash

        git config --global core.editor "nombre_del_editor"

    Paso 3: Iniciar un Repositorio Local

    Inicializar un nuevo repositorio:
        Navega a la carpeta de tu proyecto en la terminal y ejecuta:

        bash

    git init

    Añadir archivos al repositorio:

    Usa el siguiente comando para agregar archivos al área de preparación (staging):

    bash

    git add nombre_del_archivo

    Realizar el primer commit:

    Después de agregar archivos, realiza tu primer commit con el siguiente comando:

    bash

        git commit -m "Primer commit"

    Paso 4: Trabajar con Ramas (Branches)

    Crear una nueva rama:
        Para trabajar en una característica o solucionar un problema, crea una nueva rama con:

        bash

    git branch nombre_de_la_rama

    Cambiar a una rama:

    Usa el siguiente comando para cambiar a la nueva rama:

    bash

    git checkout nombre_de_la_rama

    Unir ramas (merge):

    Cuando termines tu trabajo en una rama, puedes unirla a la rama principal (por ejemplo, master) con:

    bash

        git checkout master
        git merge nombre_de_la_rama

    Paso 5: Trabajar con Repositorios Remotos (GitHub)

    Crear un repositorio en GitHub:
        Ve a GitHub, inicia sesión, y crea un nuevo repositorio.

    Conectar repositorio local con el remoto:
        Usa el siguiente comando para agregar el repositorio remoto:

        bash

    git remote add origin URL_del_repositorio_en_GitHub

    Subir cambios al repositorio remoto:

    Después de realizar cambios locales, usa los siguientes comandos para subirlos a GitHub:

    bash

    git push -u origin nombre_de_la_rama

    Clonar un repositorio remoto:

    Si quieres trabajar en un proyecto existente, clona el repositorio con:

    bash

        git clone URL_del_repositorio_en_GitHub

    Estos pasos proporcionan una base sólida para comenzar a trabajar con Git y GitHub. A medida que avanzas, puedes explorar características más avanzadas y practicar para consolidar tus habilidades.

   
2 - Visual Studio Code

    Url descarga: https://code.visualstudio.com
    Documentacion : https://code.visualstudio.com/docs/nodejs/nodejs-tutorial

 Tutorial: https://www.youtube.com/watch?v=CxF3ykWP1H4&ab_channel=MoureDevbyBraisMoure

  ⏰  ÍNDICE:
       00:00 | Visual Studio Code
       00:51 | Mejora tu inglés
       02:11 | Introducción e instalación
       03:15 | Interfaz de usuario
       04:19 | Editor de código
       04:57 | Extensiones
       06:04 | Depuración
       06:29 | Acciones
       07:29 | Configuración
        08:02 | Conclusiones
 
3 - Intro Javascript (Hola Mundo (Consola)) 

    Documentacion: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
    *********
    Desafio
    *********
 Empecémos creando la aplicación más simple de Node.js, "Hola World".
 Crear una carpeta vacía llamada "hola", navegar y abrir código VS:(desde linea de comandos)
 
 mkdir hola (creara la carpeta)
 cd hello   (ingresara a la carpeta)
 code .      (Abrirar una ventana nueva de VS en esa ubicacion)
 
 -Desde la barra de herramientas de archivo Explorer, pulse el botón Nuevo Archivo: y nombre el archivo app.js:
 -Crear una simple variable de cadena en app.js y enviar el contenido de la cadena a la consola:
 
 app.js
 --------------------------
  var msg = 'Hello World';
  console.log(msg);
 
  -------------------------
 
 -guarde el archivo (Ctrl-S)
 
 
 Corriendo Hola Mundo
 
 Es simple de correr. app.jscon Node.js. Desde un terminal, simplemente escriba:
 
 
 
 Terminal 
 -----------------------
 node app.js
 -----------------------

4 - Introduccion a Express (Hola Mundo)

  Documentacion: https://code.visualstudio.com/docs/nodejs/nodejs-tutorial

  *********** Una aplicación Express ***********

    Express es un marco de aplicación muy popular para construir y ejecutar aplicaciones Node.js. Puede andarda (crear) una nueva aplicación Express usando la herramienta Express Generator. El Generador Express se envía como módulo npm e instala mediante la herramienta de línea de comando (npm).

    Sugerir: Para probar que tienes npm instalados correctamente en su ordenador, tipo npm --helpdesde un terminal y usted debe ver la documentación de uso.
    
 1 - Instale el Generador Express ejecutando lo siguiente desde un terminal:

    Terminal
    ----------------------------------------------
    npm install -g express-generator
    ----------------------------------------------
    El (-g)El interruptor instala el Generador Express de todo el mundo en su máquina para que pueda ejecutarlo desde cualquier lugar.

 2 - hora podemos andarda una nueva aplicación Express llamada | myExpressApp |corrigando:
    
    Terminal
    ---------------------------------------------    
    express myExpressApp --view pug ///
    ---------------------------------------------
        si aparece este error: 

        ***************************************************************************************************************************
        Terminal error:
        ----------------------------------------------------------------------------------------------------------------------------
        express : No se puede cargar el archivo C:\Users\andre\AppData\Roaming\npm\express.ps1 porque la ejecución de scripts está deshabilitada en este sistema. Para   obtener más información, consulta el tema about_Execution_Policies en https:/go.microsoft.com/fwlink/?LinkID=135170. En línea: 1 Carácter: 1 + express myExpressApp --view pug + ~~~~~~~     + CategoryInfo          : SecurityError: (:) [], PSSecurityException     + FullyQualifiedErrorId : UnauthorizedAccess
        ----------------------------------------------------------------------------------------------------------------------------
        (Tranquilo)
        solo abre el power shell como administrador y ejecuta el siguiente comando Set-ExecutionPolicy Unrestricted esto solucionara tu         problema y podras ejectar scripts en la consola de VS Code
        ****************************************************************************************************************************

     Esto crea una nueva carpeta llamada | myExpressApp| con el contenido de su aplicación. El |--view puglos|  parámetros indican al generador que utilice el motor de plantilla de pug.

 3 - Para instalar todas las dependencias de la aplicación (enviada de nuevo como módulos npm), vaya a la nueva carpeta y ejecute npm install:

    --------------------
    cd myExpressApp
    npm install
    --------------------
 4 - En este punto, debemos probar que nuestra aplicación se ejecuta. La aplicación Express generada tiene una | package.json |archivo que incluye un start guión para ejecutar node ./bin/www. Esto comenzará la aplicación Node.js en ejecución.

    Desde un terminal en la carpeta de aplicación Express, ejecute:
    
    Terminal
    -------------------------
     npm start
    -------------------------
    El servidor web Node.js comenzará y puede navegar a http://localhost:3000 para ver la aplicación en ejecución.
    Luego :
    Cierre el navegador y de un terminal en el |myExpressApp| carpeta, detenga el servidor Node.js pulsando CTRL-C.


    La documentación de Node.js y Express hace un gran trabajo explicando cómo construir aplicaciones ricas utilizando la plataforma y el marco. Visual Studio Code te hará más productivo en el desarrollo de este tipo de aplicaciones proporcionando grandes experiencias de edición de código y navegación.

5 - Depuracion de Aplicaciones  

    Documentacion: https://code.visualstudio.com/docs/nodejs/nodejs-debugging
 

6 - Despliegue de Aplicaciones 

    Documentacion: https://code.visualstudio.com/docs/nodejs/nodejs-deployment

7 - React(Hola Mundo)

    Documentacion: https://code.visualstudio.com/docs/nodejs/reactjs-tutorial 











